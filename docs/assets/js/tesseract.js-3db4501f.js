import"./regenerator-runtime-7d2297e9.js";import{i as ue}from"./is-electron-4d708413.js";var M=(e,t)=>`${e}-${t}-${Math.random().toString(16).slice(3,8)}`;const pe=M;let U=0;var x=({id:e,action:t,payload:o={}})=>{let n=e;return typeof n>"u"&&(n=pe("Job",U),U+=1),{id:n,action:t,payload:o}},v={};let C=!1;v.logging=C;v.setLogging=e=>{C=e};v.log=(...e)=>C?console.log.apply(globalThis,e):null;const fe=x,{log:$}=v,ge=M;let B=0;var he=()=>{const e=ge("Scheduler",B),t={},o={};let n=[];B+=1;const h=()=>n.length,b=()=>Object.keys(t).length,u=()=>{if(n.length!==0){const a=Object.keys(t);for(let p=0;p<a.length;p+=1)if(typeof o[a[p]]>"u"){n[0](t[a[p]]);break}}},i=(a,p)=>new Promise((A,O)=>{const E=fe({action:a,payload:p});n.push(async R=>{n.shift(),o[R.id]=E;try{A(await R[a].apply(globalThis,[...p,E.id]))}catch(_){O(_)}finally{delete o[R.id],u()}}),$(`[${e}]: Add ${E.id} to JobQueue`),$(`[${e}]: JobQueue length=${n.length}`),u()});return{addWorker:a=>(t[a.id]=a,$(`[${e}]: Add ${a.id}`),$(`[${e}]: Number of workers=${b()}`),u(),a.id),addJob:async(a,...p)=>{if(b()===0)throw Error(`[${e}]: You need to have at least one worker before adding jobs`);return i(a,p)},terminate:async()=>{Object.keys(t).forEach(async a=>{await t[a].terminate()}),n=[]},getQueueLen:h,getNumWorkers:b}};function me(e){throw new Error('Could not dynamically require "'+e+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}const be=ue;var we=e=>{const t={};return typeof WorkerGlobalScope<"u"?t.type="webworker":be()?t.type="electron":typeof document=="object"?t.type="browser":typeof process=="object"&&typeof me=="function"&&(t.type="node"),typeof e>"u"?t:t[e]};const ye=we("type")==="browser",Le=ye?e=>new URL(e,window.location.href).href:e=>e;var ke=e=>{const t={...e};return["corePath","workerPath","langPath"].forEach(o=>{e[o]&&(t[o]=Le(t[o]))}),t},Ee=e=>{const t=[],o=[],n=[],h=[],b=[];return e.blocks&&e.blocks.forEach(u=>{u.paragraphs.forEach(i=>{i.lines.forEach(w=>{w.words.forEach(y=>{y.symbols.forEach(S=>{b.push({...S,page:e,block:u,paragraph:i,line:w,word:y})}),h.push({...y,page:e,block:u,paragraph:i,line:w})}),n.push({...w,page:e,block:u,paragraph:i})}),o.push({...i,page:e,block:u})}),t.push({...u,page:e})}),{...e,blocks:t,paragraphs:o,lines:n,words:h,symbols:b}},H={TESSERACT_ONLY:0,LSTM_ONLY:1,TESSERACT_LSTM_COMBINED:2,DEFAULT:3};const ve="tesseract.js",Se="5.0.5",Ae="Pure Javascript Multilingual OCR",Oe="src/index.js",Re="src/index.d.ts",Te="dist/tesseract.min.js",$e="dist/tesseract.min.js",_e={start:"node scripts/server.js",build:"rimraf dist && webpack --config scripts/webpack.config.prod.js && rollup -c scripts/rollup.esm.mjs","profile:tesseract":"webpack-bundle-analyzer dist/tesseract-stats.json","profile:worker":"webpack-bundle-analyzer dist/worker-stats.json",prepublishOnly:"npm run build",wait:"rimraf dist && wait-on http://localhost:3000/dist/tesseract.min.js",test:"npm-run-all -p -r start test:all","test:all":"npm-run-all wait test:browser:* test:node:all","test:node":"nyc mocha --exit --bail --require ./scripts/test-helper.js","test:node:all":"npm run test:node -- ./tests/*.test.js","test:browser-tpl":"mocha-headless-chrome -a incognito -a no-sandbox -a disable-setuid-sandbox -a disable-logging -t 300000","test:browser:detect":"npm run test:browser-tpl -- -f ./tests/detect.test.html","test:browser:recognize":"npm run test:browser-tpl -- -f ./tests/recognize.test.html","test:browser:scheduler":"npm run test:browser-tpl -- -f ./tests/scheduler.test.html","test:browser:FS":"npm run test:browser-tpl -- -f ./tests/FS.test.html",lint:"eslint src","lint:fix":"eslint --fix src",postinstall:"opencollective-postinstall || true"},je={"./src/worker/node/index.js":"./src/worker/browser/index.js"},Ne="",Ie=["jeromewu"],Pe="Apache-2.0",Me={"@babel/core":"^7.21.4","@babel/eslint-parser":"^7.21.3","@babel/preset-env":"^7.21.4","@rollup/plugin-commonjs":"^24.1.0",acorn:"^8.8.2","babel-loader":"^9.1.2",buffer:"^6.0.3",cors:"^2.8.5",eslint:"^7.32.0","eslint-config-airbnb-base":"^14.2.1","eslint-plugin-import":"^2.27.5","expect.js":"^0.3.1",express:"^4.18.2",mocha:"^10.2.0","mocha-headless-chrome":"^4.0.0","npm-run-all":"^4.1.5",nyc:"^15.1.0",rimraf:"^5.0.0",rollup:"^3.20.7","wait-on":"^7.0.1",webpack:"^5.79.0","webpack-bundle-analyzer":"^4.8.0","webpack-cli":"^5.0.1","webpack-dev-middleware":"^6.0.2","rollup-plugin-sourcemaps":"^0.6.3"},Ce={"bmp-js":"^0.1.0","idb-keyval":"^6.2.0","is-electron":"^2.2.2","is-url":"^1.2.4","node-fetch":"^2.6.9","opencollective-postinstall":"^2.0.3","regenerator-runtime":"^0.13.3","tesseract.js-core":"^5.0.0","wasm-feature-detect":"^1.2.11",zlibjs:"^0.3.1"},De={"@rollup/pluginutils":"^5.0.2"},ze={type:"git",url:"https://github.com/naptha/tesseract.js.git"},Fe={url:"https://github.com/naptha/tesseract.js/issues"},Ue="https://github.com/naptha/tesseract.js",Be={type:"opencollective",url:"https://opencollective.com/tesseractjs"},We={name:ve,version:Se,description:Ae,main:Oe,types:Re,unpkg:Te,jsdelivr:$e,scripts:_e,browser:je,author:Ne,contributors:Ie,license:Pe,devDependencies:Me,dependencies:Ce,overrides:De,repository:ze,bugs:Fe,homepage:Ue,collective:Be};var Ge={workerBlobURL:!0,logger:()=>{}};const Ke=We.version,xe=Ge;var He={...xe,workerPath:`https://cdn.jsdelivr.net/npm/tesseract.js@v${Ke}/dist/worker.min.js`},Ye=({workerPath:e,workerBlobURL:t})=>{let o;if(Blob&&URL&&t){const n=new Blob([`importScripts("${e}");`],{type:"application/javascript"});o=new Worker(URL.createObjectURL(n))}else o=new Worker(e);return o},Je=e=>{e.terminate()},qe=(e,t)=>{e.onmessage=({data:o})=>{t(o)}},Ve=async(e,t)=>{e.postMessage(t)};const I=e=>new Promise((t,o)=>{const n=new FileReader;n.onload=()=>{t(n.result)},n.onerror=({target:{error:{code:h}}})=>{o(Error(`File could not be read! Code=${h}`))},n.readAsArrayBuffer(e)}),P=async e=>{let t=e;if(typeof e>"u")return"undefined";if(typeof e=="string")/data:image\/([a-zA-Z]*);base64,([^"]*)/.test(e)?t=atob(e.split(",")[1]).split("").map(o=>o.charCodeAt(0)):t=await(await fetch(e)).arrayBuffer();else if(typeof HTMLElement<"u"&&e instanceof HTMLElement)e.tagName==="IMG"&&(t=await P(e.src)),e.tagName==="VIDEO"&&(t=await P(e.poster)),e.tagName==="CANVAS"&&await new Promise(o=>{e.toBlob(async n=>{t=await I(n),o()})});else if(typeof OffscreenCanvas<"u"&&e instanceof OffscreenCanvas){const o=await e.convertToBlob();t=await I(o)}else(e instanceof File||e instanceof Blob)&&(t=await I(e));return new Uint8Array(t)};var Ze=P;const Qe=He,Xe=Ye,et=Je,tt=qe,rt=Ve,st=Ze;var ot={defaultOptions:Qe,spawnWorker:Xe,terminateWorker:et,onMessage:tt,send:rt,loadImage:st};const nt=ke,at=Ee,g=x,{log:W}=v,it=M,k=H,{defaultOptions:ct,spawnWorker:lt,terminateWorker:dt,onMessage:ut,loadImage:G,send:pt}=ot;let K=0;var Y=async(e="eng",t=k.LSTM_ONLY,o={},n={})=>{const h=it("Worker",K),{logger:b,errorHandler:u,...i}=nt({...ct,...o}),w={},y={},S=typeof e=="string"?e.split("+"):e;let a=t,p=n;const A=[k.DEFAULT,k.LSTM_ONLY].includes(t)&&!i.legacyCore;let O,E;const R=new Promise((r,s)=>{E=r,O=s}),_=r=>{O(r.message)};let L=lt(i);L.onerror=_,K+=1;const D=(r,s)=>{w[r]=s},z=(r,s)=>{y[r]=s},f=({id:r,action:s,payload:c})=>new Promise((d,l)=>{W(`[${h}]: Start ${r}, action=${s}`);const m=`${s}-${r}`;D(m,d),z(m,l),pt(L,{workerId:h,jobId:r,action:s,payload:c})}),q=()=>console.warn("`load` is depreciated and should be removed from code (workers now come pre-loaded)"),V=r=>f(g({id:r,action:"load",payload:{options:{lstmOnly:A,corePath:i.corePath,logging:i.logging}}})),Z=(r,s,c)=>f(g({id:c,action:"FS",payload:{method:"writeFile",args:[r,s]}})),Q=(r,s)=>f(g({id:s,action:"FS",payload:{method:"readFile",args:[r,{encoding:"utf8"}]}})),X=(r,s)=>f(g({id:s,action:"FS",payload:{method:"unlink",args:[r]}})),ee=(r,s,c)=>f(g({id:c,action:"FS",payload:{method:r,args:s}})),te=()=>console.warn("`loadLanguage` is depreciated and should be removed from code (workers now come with language pre-loaded)"),F=(r,s)=>f(g({id:s,action:"loadLanguage",payload:{langs:r,options:{langPath:i.langPath,dataPath:i.dataPath,cachePath:i.cachePath,cacheMethod:i.cacheMethod,gzip:i.gzip,lstmOnly:[k.LSTM_ONLY,k.TESSERACT_LSTM_COMBINED].includes(a)&&!i.legacyLang}}})),re=()=>console.warn("`initialize` is depreciated and should be removed from code (workers now come pre-initialized)"),j=(r,s,c,d)=>f(g({id:d,action:"initialize",payload:{langs:r,oem:s,config:c}})),se=(r="eng",s,c,d)=>{if(A&&[k.TESSERACT_ONLY,k.TESSERACT_LSTM_COMBINED].includes(s))throw Error("Legacy model requested but code missing.");const l=s||a;a=l;const m=c||p;p=m;const N=(typeof r=="string"?r.split("+"):r).filter(de=>!S.includes(de));return S.push(...N),N.length>0?F(N,d).then(()=>j(r,l,m,d)):j(r,l,m,d)},oe=(r={},s)=>f(g({id:s,action:"setParameters",payload:{params:r}})),ne=async(r,s={},c={blocks:!0,text:!0,hocr:!0,tsv:!0},d)=>f(g({id:d,action:"recognize",payload:{image:await G(r),options:s,output:c}})),ae=(r="Tesseract OCR Result",s=!1,c)=>(console.log("`getPDF` function is depreciated. `recognize` option `savePDF` should be used instead."),f(g({id:c,action:"getPDF",payload:{title:r,textonly:s}}))),ie=async(r,s)=>{if(A)throw Error("`worker.detect` requires Legacy model, which was not loaded.");return f(g({id:s,action:"detect",payload:{image:await G(r)}}))},ce=async()=>(L!==null&&(dt(L),L=null),Promise.resolve());ut(L,({workerId:r,jobId:s,status:c,action:d,data:l})=>{const m=`${d}-${s}`;if(c==="resolve"){W(`[${r}]: Complete ${s}`);let T=l;d==="recognize"?T=at(l):d==="getPDF"&&(T=Array.from({...l,length:Object.keys(l).length})),w[m]({jobId:s,data:T})}else if(c==="reject")if(y[m](l),d==="load"&&O(l),u)u(l);else throw Error(l);else c==="progress"&&b({...l,userJobId:s})});const le={id:h,worker:L,setResolve:D,setReject:z,load:q,writeText:Z,readText:Q,removeFile:X,FS:ee,loadLanguage:te,initialize:re,reinitialize:se,setParameters:oe,recognize:ne,getPDF:ae,detect:ie,terminate:ce};return V().then(()=>F(e)).then(()=>j(e,t,n)).then(()=>E(le)).catch(()=>{}),R};const J=Y,ft=async(e,t,o)=>{const n=await J(t,1,o);return n.recognize(e).finally(async()=>{await n.terminate()})},gt=async(e,t)=>{const o=await J("osd",0,t);return o.detect(e).finally(async()=>{await o.terminate()})};var ht={recognize:ft,detect:gt},mt={AFR:"afr",AMH:"amh",ARA:"ara",ASM:"asm",AZE:"aze",AZE_CYRL:"aze_cyrl",BEL:"bel",BEN:"ben",BOD:"bod",BOS:"bos",BUL:"bul",CAT:"cat",CEB:"ceb",CES:"ces",CHI_SIM:"chi_sim",CHI_TRA:"chi_tra",CHR:"chr",CYM:"cym",DAN:"dan",DEU:"deu",DZO:"dzo",ELL:"ell",ENG:"eng",ENM:"enm",EPO:"epo",EST:"est",EUS:"eus",FAS:"fas",FIN:"fin",FRA:"fra",FRK:"frk",FRM:"frm",GLE:"gle",GLG:"glg",GRC:"grc",GUJ:"guj",HAT:"hat",HEB:"heb",HIN:"hin",HRV:"hrv",HUN:"hun",IKU:"iku",IND:"ind",ISL:"isl",ITA:"ita",ITA_OLD:"ita_old",JAV:"jav",JPN:"jpn",KAN:"kan",KAT:"kat",KAT_OLD:"kat_old",KAZ:"kaz",KHM:"khm",KIR:"kir",KOR:"kor",KUR:"kur",LAO:"lao",LAT:"lat",LAV:"lav",LIT:"lit",MAL:"mal",MAR:"mar",MKD:"mkd",MLT:"mlt",MSA:"msa",MYA:"mya",NEP:"nep",NLD:"nld",NOR:"nor",ORI:"ori",PAN:"pan",POL:"pol",POR:"por",PUS:"pus",RON:"ron",RUS:"rus",SAN:"san",SIN:"sin",SLK:"slk",SLV:"slv",SPA:"spa",SPA_OLD:"spa_old",SQI:"sqi",SRP:"srp",SRP_LATN:"srp_latn",SWA:"swa",SWE:"swe",SYR:"syr",TAM:"tam",TEL:"tel",TGK:"tgk",TGL:"tgl",THA:"tha",TIR:"tir",TUR:"tur",UIG:"uig",UKR:"ukr",URD:"urd",UZB:"uzb",UZB_CYRL:"uzb_cyrl",VIE:"vie",YID:"yid"},bt={OSD_ONLY:"0",AUTO_OSD:"1",AUTO_ONLY:"2",AUTO:"3",SINGLE_COLUMN:"4",SINGLE_BLOCK_VERT_TEXT:"5",SINGLE_BLOCK:"6",SINGLE_LINE:"7",SINGLE_WORD:"8",CIRCLE_WORD:"9",SINGLE_CHAR:"10",SPARSE_TEXT:"11",SPARSE_TEXT_OSD:"12",RAW_LINE:"13"};const wt=he,yt=Y,Lt=ht,kt=mt,Et=H,vt=bt,{setLogging:St}=v;var Rt={languages:kt,OEM:Et,PSM:vt,createScheduler:wt,createWorker:yt,setLogging:St,...Lt};export{Rt as s};
